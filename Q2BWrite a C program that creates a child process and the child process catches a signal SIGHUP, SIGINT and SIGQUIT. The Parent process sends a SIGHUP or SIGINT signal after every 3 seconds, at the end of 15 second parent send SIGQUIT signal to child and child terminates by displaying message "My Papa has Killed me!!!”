#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

int child_pid;

void sighup_handler(int signum) {
    printf("Child: Received SIGHUP signal\n");
}

void sigint_handler(int signum) {
    printf("Child: Received SIGINT signal\n");
}

void sigquit_handler(int signum) {
    printf("Child: My Papa has Killed me!!!\n");
    exit(0);
}

void spawn_child() {
    child_pid = fork();
    if (child_pid == -1) {
        perror("Failed to create child process");
        exit(1);
    } else if (child_pid == 0) {
        // Child process
        signal(SIGHUP, sighup_handler);
        signal(SIGINT, sigint_handler);
        signal(SIGQUIT, sigquit_handler);
        
        while (1) {
            // Child process is waiting for signals
            sleep(1);
        }
    }
}

int main() {
    spawn_child();
    
    // Parent process
    int i;
    for (i = 1; i <= 5; i++) {
        sleep(3); // Sending signal every 3 seconds
        
        if (i < 5) {
            // Sending SIGHUP or SIGINT
            if (i % 2 == 0) {
                printf("Parent: Sending SIGHUP signal\n");
                kill(child_pid, SIGHUP);
            } else {
                printf("Parent: Sending SIGINT signal\n");
                kill(child_pid, SIGINT);
            }
        } else {
            // Sending SIGQUIT after 15 seconds
            printf("Parent: Sending SIGQUIT signal\n");
            kill(child_pid, SIGQUIT);
        }
    }
    
    // Waiting for child process to terminate
    wait(NULL);
    
    return 0;
}
